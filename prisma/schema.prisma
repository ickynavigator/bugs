// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["driverAdapters"]
}

datasource db {
    provider = "sqlite"
    url      = env("DATABASE_URL")
}

model IssueState {
    id      Int    @id @default(autoincrement())
    name    String
    color   String
    ordinal Int    @default(0)

    Issue     Issue[]
    Project   Project @relation(fields: [projectId], references: [id])
    projectId Int
}

model Issue {
    id          Int     @id @default(autoincrement())
    name        String
    description String?
    severity    Int
    ordinal     Int     @default(0)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    state   IssueState @relation(fields: [stateId], references: [id])
    stateId Int

    Project   Project @relation(fields: [projectId], references: [id])
    projectId Int

    @@index([projectId])
}

model Project {
    id          Int     @id @default(autoincrement())
    name        String
    shortcode   String  @unique
    description String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    Issues      Issue[]
    issueStates IssueState[]

    @@index([name])
    @@index([createdById])
}

model Note {
    id        Int      @id @default(autoincrement())
    name      String
    content   String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String
}

// region -  NextAuth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String?
    refresh_token_expires_in Int?
    access_token             String?
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String?
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    Project       Project[]
    Issue         Issue[]
    Note          Note[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// endregion - NextAuth
